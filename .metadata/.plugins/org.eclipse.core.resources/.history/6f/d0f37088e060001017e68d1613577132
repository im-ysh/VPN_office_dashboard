<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>VPN Dashboard - Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .log-container {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-top: 10px;
        }
        button {
            padding: 8px 16px;
            margin: 5px 0;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background: #0056b3;
        }
        .log-section {
            margin-bottom: 30px;
            border-bottom: 1px solid #eee;
            padding-bottom: 20px;
        }
        .status-message {
            color: #666;
            font-style: italic;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <h1>Welcome, <span id="user"></span></h1>
    <button id="logoutBtn">Logout</button>

    <div class="log-section">
        <h2>Device Log</h2>
        <button id="postDeviceLogBtn">Post Device Log</button>
    </div>

    <div class="log-section">
        <h2>User Logs</h2>
        <button id="fetchUserBtn">Fetch User Logs</button>
        <div id="userLogsStatus" class="status-message">No data fetched yet</div>
        <div class="log-container">
            <table id="userLogsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Log Data</th>
                        <th>IP Address</th>
                        <th>Device Info</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <div class="log-section">
        <h2>Training Logs</h2>
        <button id="fetchTrainingBtn">Fetch Training Logs</button>
        <div id="trainingLogsStatus" class="status-message">No data fetched yet</div>
        <div class="log-container">
            <table id="trainingLogsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Log Data</th>
                        <th>IP Address</th>
                        <th>Device Info</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <div class="log-section">
        <h2>Audit Logs</h2>
        <button id="fetchAuditBtn">Fetch Audit Logs</button>
        <div id="auditLogsStatus" class="status-message">No data fetched yet</div>
        <div class="log-container">
            <table id="auditLogsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Log Data</th>
                        <th>IP Address</th>
                        <th>Device Info</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script>
        const baseURL = "http://100.90.249.20:8080/vpn-backend";
        const username = localStorage.getItem("username") || "guest";
        
        // Set username display
        document.getElementById("user").textContent = username;

        // Configure fetch defaults
        const fetchConfig = {
            mode: 'cors',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        };

        // Function to populate table with debugging
        function populateTable(tableId, statusId, data) {
            console.log(`Populating ${tableId} with:`, data); // Debug log
            
            const tableBody = document.querySelector(`#${tableId} tbody`);
            const statusElement = document.getElementById(statusId);
            
            // Clear existing rows
            tableBody.innerHTML = '';
            
            if (!data) {
                statusElement.textContent = "Error: No data received";
                return;
            }
            
            // Handle case where data is in a nested property
            let logs = data;
            if (data.data) logs = data.data;
            if (data.logs) logs = data.logs;
            
            if (!Array.isArray(logs)) {
                logs = [logs]; // Convert single object to array
            }
            
            if (logs.length === 0) {
                statusElement.textContent = "No logs found";
                return;
            }
            
            statusElement.textContent = `Showing ${logs.length} log entries`;
            
            logs.forEach(log => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${log.id || '-'}</td>
                    <td>${log.log_data || '-'}</td>
                    <td>${log.ip_address || '-'}</td>
                    <td>${log.device_info ? log.device_info.substring(0, 50) + (log.device_info.length > 50 ? '...' : '') : '-'}</td>
                    <td>${log.timestamp || '-'}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Fetch functions with enhanced debugging
        async function fetchUserLogs() {
            try {
                console.log("Fetching user logs..."); // Debug log
                const response = await fetch(
                    `${baseURL}/fetch-user-logs?username=${encodeURIComponent(username)}`,
                    fetchConfig
                );
                console.log("Response status:", response.status); // Debug log
                const data = await response.json();
                console.log("User logs data:", data); // Debug log
                populateTable('userLogsTable', 'userLogsStatus', data);
            } catch (error) {
                console.error("Fetch error:", error);
                document.getElementById('userLogsStatus').textContent = "Error fetching logs";
            }
        }

        async function fetchTrainingLogs() {
            try {
                console.log("Fetching training logs...");
                const response = await fetch(
                    `${baseURL}/fetch-training-logs?username=${encodeURIComponent(username)}`,
                    fetchConfig
                );
                const data = await response.json();
                console.log("Training logs data:", data);
                populateTable('trainingLogsTable', 'trainingLogsStatus', data);
            } catch (error) {
                console.error("Fetch error:", error);
                document.getElementById('trainingLogsStatus').textContent = "Error fetching logs";
            }
        }

        async function fetchAuditLogs() {
            try {
                console.log("Fetching audit logs...");
                const response = await fetch(
                    `${baseURL}/fetch-audit-logs`,
                    fetchConfig
                );
                const data = await response.json();
                console.log("Audit logs data:", data);
                populateTable('auditLogsTable', 'auditLogsStatus', data);
            } catch (error) {
                console.error("Fetch error:", error);
                document.getElementById('auditLogsStatus').textContent = "Error fetching logs";
            }
        }

        async function postDeviceLog() {
            const log = prompt("Enter log data:");
            if (!log) return;
            
            try {
                const response = await fetch(`${baseURL}/logs`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `username=${encodeURIComponent(username)}&log_data=${encodeURIComponent(log)}`
                });
                const data = await response.json();
                alert(data.message || "Log posted successfully");
                fetchUserLogs(); // Refresh logs
            } catch (error) {
                console.error("Post error:", error);
                alert("Error posting log");
            }
        }

        function logout() {
            localStorage.clear();
            window.location.href = "login.html";
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById("fetchUserBtn").addEventListener("click", fetchUserLogs);
            document.getElementById("fetchTrainingBtn").addEventListener("click", fetchTrainingLogs);
            document.getElementById("fetchAuditBtn").addEventListener("click", fetchAuditLogs);
            document.getElementById("postDeviceLogBtn").addEventListener("click", postDeviceLog);
            document.getElementById("logoutBtn").addEventListener("click", logout);
        });
    </script>
</body>
</html>